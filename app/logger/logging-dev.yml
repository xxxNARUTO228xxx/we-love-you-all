version: 1
disable_existing_loggers: False

_vars:
    FILE_WHEN: midnight
    FILE_INTERVAL: 1
    FILE_BACKUPCOUNT: 10
    FILE_ENCODING: utf-8
    FILE_FILENAME: app.log

handlers:
    # filename becomes {log_dir}/{filename} in log_utils.init_logger

    # filter_debug_only
    handler_debug_console:
        class: logging.StreamHandler
        stream: ext://sys.stdout
        formatter: fmt_full
        filters: [filter_debug_only]

    handler_debug_file:
        class: logging.handlers.TimedRotatingFileHandler
        when: cfg://_vars.FILE_WHEN
        interval: cfg://_vars.FILE_INTERVAL
        backupCount: cfg://_vars.FILE_BACKUPCOUNT
        encoding: cfg://_vars.FILE_ENCODING
        filename: cfg://_vars.FILE_FILENAME
        formatter: fmt_full
        filters: [filter_debug_only]

    # filter_info_only
    handler_info_console:
        class: logging.StreamHandler
        stream: ext://sys.stdout
        formatter: fmt_short
        filters: [filter_info_only]

    handler_info_file:
        class: logging.handlers.TimedRotatingFileHandler
        when: cfg://_vars.FILE_WHEN
        interval: cfg://_vars.FILE_INTERVAL
        backupCount: cfg://_vars.FILE_BACKUPCOUNT
        encoding: cfg://_vars.FILE_ENCODING
        filename: cfg://_vars.FILE_FILENAME
        formatter: fmt_short
        filters: [filter_info_only]

    # filter_warn_and_above
    handler_warn_console:
        class: logging.StreamHandler
        stream: ext://sys.stdout
        formatter: fmt_full
        filters: [filter_warn_and_above]

    handler_warn_file:
        class: logging.handlers.TimedRotatingFileHandler
        when: cfg://_vars.FILE_WHEN
        interval: cfg://_vars.FILE_INTERVAL
        backupCount: cfg://_vars.FILE_BACKUPCOUNT
        encoding: cfg://_vars.FILE_ENCODING
        filename: cfg://_vars.FILE_FILENAME
        formatter: fmt_full
        filters: [filter_warn_and_above]

filters:
    # Уровни логов:
    # Level    Numeric value
    # CRITICAL 50
    # ERROR    40
    # WARNING  30
    # INFO     20
    # DEBUG    10
    # NOTSET   0

    # DEBUG only
    filter_debug_only:
        "()": logger.utils.LoggerLevelFilter
        "level": DEBUG
        "and_above": False

    # INFO only
    filter_info_only:
        "()": logger.utils.LoggerLevelFilter
        "level": INFO
        "and_above": False

    # WARNING, ERROR, CRITICAL
    filter_warn_and_above:
        "()": logger.utils.LoggerLevelFilter
        "level": WARNING
        "and_above": True

formatters:
    fmt_short:
        format: "[%(asctime)s]\t(%(process)s)\t(%(processName)s)\t%(name)s\t%(levelname)s\t\"%(message)s\""

    fmt_full:
        # className - from log_utils logging.setLogRecordFactory(makeLogRecord)
        format: "[%(asctime)s]\t(%(process)s)\t(%(processName)s)\t%(name)s\t%(levelname)s\tfile=%(filename)s, line=%(lineno)s\tclass=%(className)s\tfunction=%(funcName)s\tmessage=\"%(message)s\""

loggers:
    root:
        handlers:
            [handler_debug_console, handler_info_console, handler_warn_console]
